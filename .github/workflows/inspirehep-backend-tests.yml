name: Build and run backend tests

on:
  workflow_call:
    inputs:
      ref:
        description: The reference to test
        type: string
        required: true
      suite:
        description: The test suite to run
        type: string
        required: true
      splits:
        description: Number of splits to run in parallel
        type: number
        required: true

env:
  DOCKER_BUILD_SUMMARY: ${{ vars.DOCKER_BUILD_SUMMARY }}
  DOCKER_BUILD_RECORD_UPLOAD: ${{ vars.DOCKER_BUILD_RECORD_UPLOAD }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.generate.outputs.groups }}
      seed: ${{ steps.generate.outputs.seed }}
    steps:
      - id: generate
        name: Generate groups
        run: |
          seq ${{ inputs.splits }} | jq --slurp --compact-output | xargs printf 'groups=%s\n' >>$GITHUB_OUTPUT
          printf 'seed=%d\n' $RANDOM >>$GITHUB_OUTPUT
  
  inspirehep-backend-tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJSON(needs.setup.outputs.groups) }}
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:14.1
        env:
          POSTGRES_USER: inspirehep
          POSTGRES_PASSWORD: inspirehep
          POSTGRES_DB: inspirehep
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
      elasticsearch:
        image: registry.cern.ch/cern-sis/inspirehep/opensearch
        env:
          bootstrap.memory_lock: true
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true
        ports:
          - 9200:9200
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
            ref: ${{ inputs.ref }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          tags: hep-build-${{ inputs.ref }}
          context: backend/ 
          push: false
          load: true
        
      - name: Test
        run: >
          docker run
          --entrypoint poetry
          --network="host"
          --env GITHUB_ACTIONS=true
          --env PYTEST_RUN_PATH=backend
          hep-build-${{ inputs.ref }}
          run py.test tests/${{ inputs.suite }}
          --splits ${{ inputs.splits }}
          --group ${{ matrix.group }}
          --random-order-seed ${{ needs.setup.outputs.seed }}
